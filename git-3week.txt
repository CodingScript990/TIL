✔ Git 핵심쏙쏙

[3주차 정리 내용]

🔥 git 총정리

✔ fork

 - 내가 주인이 아닌 다른 repo에 PR하려면 Fork(일종의 프로젝트 복사)가 필요하다!
 - repository의 사용권한이 다른 사람에게 있을 때, 예로 많은 사람들이 참여하는 오픈 소스처럼, 내가 
  소유하고 있는 repo가 아니더라도 프로젝트 제안할 때는 일단 프로젝트의 내용을 내 공간으로 가져와야
  한다.
 - fork는 원본 소스코드를 복사해서 새로운 독립적인 software로 개발하는 것을 이야기한다. 마치 어떤 
  문서를 복사해서 그 위에 내가 원하는대로 수정해서 사용하는 것과 비슷하다.

  				[Fork]

 				  🟥 (나/Repo)
				
		       <fork> ↙      ↘<fork>

                          🟥              🟥
                     (김씨/Repo)     (이씨/Repo)

 - 오픈소스에 기여할때는 fork해 온 후, PR을 한다. 프로젝트에 이 오픈소스에 기여하는 방법 가이드도 
  있다.단, Github에 있는 모든 프로젝트가 PR을 받는 것은 아니니 관리하는 사람 마음대로라서 주의!
 - 다른 repo에서 PR하기도 fork를 하고 나서 이후 과정은 같은 repo에서 PR하기 와 유사하다.
 - 단, 내가 merge할 권한이 없으므로 repo관리자의 merge pull request를 기다려야한다.

✔ PR

 - PR(Pull Request) : 내작업내역을 바로 merge하지 않고, 참여하고 있는 프로젝트에 내 branch를 merge
  		      해달라고 request를 먼저 보는 것을 말한다.

		[PR 과정]	

  🔴(특정 commit) →   →   → 🔴(main branch)

    ↘			    ↗ [PR(Merge해도 되나요?)]
       ● → ● → ● → ● 
   (cmt01)(cmt02)(cmt03)(cmt04)


 - 작업한 내용에 대해 코드 리뷰를 하거나 같이 토론하면서 개선시킬 수 있는 기회가 생기는 것이다.
  프로젝트 기준에 맞지 않는다면 PR은 reject(거부) 될 수도 있다.

  🔴(특정 commit) →   →  (main branch)
    
    ↘
       ● →  ●  →  → ● (project branch)
                    ↓
  
     [PR 하기전 토론해서 개선사항을 주고 받기]
      1. 프로젝트에 이런 것을 추가하고 싶어요!
      2. 추가전에 테스트를해보고 말씀해주세요!


 - 리뷰한 후 작업내역을 최종적으로 반영하면 된다. 또 기본적으로 프로젝트 품질을 관리해야하는 회사에
  서 작업하거나, 여러 사람들이 참여하는 오픈소스에서는 PR후 merge하는 과정을 거치게 된다.


  🔴(특정 commit) →       →       →  🔴(main branch)
    
    ↘				     ↗
       ● →  ●  →  → ● →  →  
                    ↓		    ↪ [merge를 하고 PR에 반영]
  
     [PR 하기전 토론해서 개선사항을 주고 받기]

 - 내가 참여하고 싶은 오픈소스 프로젝트가 있다면 코드를 작성해서 내 코드를 반영할 수 있는지 의사를
  물어본다. 그리고 PR을 해보는 것도 있고 내가 다른 사람 소스를 사용하는 것을 넘어서 프로젝트에 참여를
  할 수 있다는 것이 큰의미가 부여된다.
 - 좋아하는 책에 저자로 참여할 수 있는 일이 개발 세계에서 일어나고 있고 Github repo의 contribution
  페이지에 기여한 사람들 정보를 적어두기도 한다.
 - 같은 repo안에서 branch를 바로 merge하지 않고 PR한 후에 검토를 받고 merge하는 것을 말한다.

 - PR은 branch를 바로 merge해서 프로젝트에 반영하는 것이 아니라 반영을 request후 merge할지 말지가
  결정된다.

       🟥	🔴  →  🔴  →  →  🔴
 (remote repo)            ↘    ↗ [PR(merge)]
                             🔴(project branch)

				    🔽 [Pull]
					
       💻	🔴  →  🔴  →  →  🔴 (Merge branch 'branch name' into main)
  (local repo)            ↘
                            🔴(project branch)

 - branch 삭제하는 이유?
  1. PR이 완료된 후에 local repo의 branch를 삭제하는 것은 이전에도 branch는 작업을 다하고 main 빼고
  는 해줘야지만 충돌을 방지 할 수 있다. 또한 필요없는 branch를 남겨두는 것을 좋지 않다.
  2. PR은 리뷰하는 과정을 통상적으로 포함한다. PR후에도 추가적으로 commit을 하는 경우도 있다.
  3. 리뷰에서 추가 수정을 요청받거나
  4. PR을 그대로 merge한다고 했을 때 merge conflict가 나는 것을 미리 고치는 것
  5. 수정제안을 받았을때, local repo의 'branch'에서 commit후, remote repo의 'branch'에 push하는 것
  이 통상적이다.

 		   [PR전 branch삭제를 왜 마지막 검토후 하는지?]
      🟥
(remote repo)	→                 →               →  🔴(Merge branch 'branch name' into main)
	
     💻	 		     ↗ [PR요청!](1)	     ↗
(local repo)	→         🔴           →        🔴[최종적으로 PR을 함](2)      
			   ↓
                    [추가사항 발생]
		 [최종적으로 작업발생!]

✔ amend

 - commit 실수 하면 기본적으로 나만 작업하는 특정 branch 하나에만 적용해야한다! 그렇지 않으면 작업
  하던 사람들의 commit까지 날라간다! 주의!!
 - 작업중 commit 메시지에 오타 났거나 파일을 add(staging)할때 최신의 commit을 수정하는 것을 amend
  (어맨드, 고치기)라고 한다. amend로는 가장 최신의 commit만 고칠 수 있다는 것을 알아두기!

		[amend]
 → 🔴  		    → 		    🔴
  (cmt01)			  (cmt02)
    ↑		   		    ↑
[amend로 못고침!]    [여기에서 amend로 수정가능!]
   
 - push후에도 push한 commit을 되돌릴 수 있다. 강제로 commit을 덮어씌우는 것과 같습니다! force push
  (강제 푸시)라고 한다.

✔ revert

 - amend로 되돌리기는 가장 최신의 commit만 되돌릴 수 있다. 그리고 어떤 걸 되돌렸는지도 알 수 없다.
 - 다른사람들과 같이 협업하고 있다면 어떤 내용이 되돌려졌는지 기록으로 남기는 것도 중요합니다.
  어떤 내용을 되돌렸는지 새로운 commit을 남기는 것을 revert라고 한다. 최신 commit뿐만 아니라 이전에
  했던 commit도 revert로 되돌릴 수 있다.

			[revert]

	🔴	 →	  🔴	   →	    🔴
     (cmt01) 	       (cmt02)	      (cmt01 add! [revert])
        ↑

     [revert]하고 싶을때!


✔ reset

 - commit했던 작업내역을 말 그대로 reset시키는 것이다. 과거로 돌아가서 새로운 삶을 사는 것처럼 reset
  이후에 작업내역은 없어진 commit기록과 관계없다!

			[reset]

	🔴	 →	  🔴	   →	    🔴
     (cmt01) 	       (cmt02)	         (cmt03)
	↑

  [여기로 기록 되돌리고 싶다면?]
	
	↓ [reset]

	🔴	X→	  🔴	   X→	    🔴
     (cmt01)		(cmt02)	         (cmt03)

 ※ 즉 cmt02, cmt03은 사라진다!! 다시 cmt01에서 새로 시작한다는 소리임!!

 - reset에는 세가지 모드가 있다.
  1. soft : head, branch에 이동만 한다. 즉, 안전하게 한다는 소리! 상태는 변함! 단 삭제되고 변화는
   없음!
  2. mixed : 이전으로 되돌아가는 것
  3. hard : 작업한 것을 모두 날리는 것

✔ stash

 - 숨겨두거나 넣어둔다라는 뜻이 있다. 프로젝트의 변경사항을 임시적으로 보고나해둘 때 사용합니다.
  다른 branch로 checkout하는 경우 현재 branch의 변경상항이 사라지게 됩니다. 아직 작업중이라 commit
  하지 않고 변경사항만 보관해두고 싶다면 이때 commit대신 stash를 사용합니다.
 - commit하지 않은 파일이면 굳이 stash할 필요없다!
 - stash는 말그대로 여러 변경사항을 임시 저장이라고 생각해라!
 - 여러번 stash했을 경우, 내가 수정한 내역이 이곳저곳에 흩어져 있어서 자칫하다가 작업내용이 날라갈
  수 있다는 점! 어떤 변경사항 stash를 저장했는지 파악하고 되도록이면 이전 stash에서 편집하던 파일을
  불러와서 작업하는 습관을 들이면 좋다!

✔ 작업으로 의사소통

 - commit으로 소통(메시지, 단위)
 1. commit메시지도 작성하는 규칙이 있다. 각 조직마다 commit 메시지 컨벤션이 있다. 프로그래밍 세계에
  서 서로 조직에서 합의한 규칙을 convention이러고 부른다.
 2. commit 메시지를 어떻게 작성해야하는지 정한 것이다.(규칙!)
 3. commit하면 다른 사람이 알기 쉽게 실제 개발 환경에서 기능을 구현하기 위해서 하나의 commit에 여러
  파일이 들어간다. 만약 파일명만 적어둔다면 코드를 하나하나 읽어야 하는 사태가 벌어진다. 그러지 않
  기 위해서 commit 메시지를 적는 것이다. 하나의 약속!

				[convention 중요성]

	→→→→→→→→→→→→→→→→→→ [main branch]
			↗ PR
	→→ 🔴	→→ 🔴 →→→→→→→→ 🟥 [PR Reject!]
 	1. A파일 추가
		  2. B파일 업데이트	 ↓
 					 ↓
				PR담당자 : 어떤 작업 하신거에요?
				개발자 : .......;;

 - commit단위도 중요하단점! commit의 단위는 내가 기록하는 작업의 단위이다. 스타일마다 틀릴 수 있지만
  commit단위에는 일관된 규칙이 있는게 좋다. 또 나중에 버그를 찾기 위해서 작업 기록을 볼 때 단위가
  잘 나누어져 있으면 금방 찾기 쉽기 때문이다.
 - 즉, 가장 작게 쪼갠다면 기능 단위로 commit해서 웹사이트를 개발할때, 메뉴바를 개발하고 commit, 카카
  오 로그인 기능을 개발하고 commit하는 식이다.
 - 아니면 issue 단위로 commit을 할 수 도 있다!
 - 좋은 commit메시지, 단위로 작성하게 되면 어떤 작업을 했는지 commit history만 봐도 알 수 있고, 
  버그를 찾을 때도 코드를 고치기 쉽고, 다른 사람이 코드를 리뷰할 때 편하단 점!

✔ 코드리뷰로 피드백주기

 - code review는 PR한 내역에서 댓글을 달면서 리뷰를 남기는 방식을 많이 사용한다.

				[code review]

	🔴					  🔴
      (issue)				       (Review)
	
	↓ [Fork]

	🔴	    →		🔴	    →   ↓ ↑   →    🔴
     (commits)		       (PR)			     (Merge)
						  🔴
					   (Revise Commits)


 - code review하는 이유?
  1. 코드의 품질을 높일 수 있다.
  2. 다른 사람의 눈으로 버그를 빠르게 발견할 수 있다.
  3. 서로의 지식을 나누면서, 더 나은 방법을 찾아낼 수 있다.
  -> 내가 만든 코드가 아니라 팀의 코드의 품질을 높인다.

 - 이런 코드 리뷰문화를 소개하는 것은 개발팀의 문화를 보여주고, 사용자에게 닿는 프로덕트 즉, 코드의
  퀄리티를 높이면서, 개선해나가고 있다는 것을 알리는 것입니다.
 - 조직마다 코드 리뷰하는 스타일이나 분위기가 조금씩 다르다. 모여서 한 자리에서 라이브로 리뷰하는 곳
  도 있다.

✔ Github 이용한 코드 리뷰

 - Git과 Github을 사용하게되면 서로 피드백을 주고 받으면서 코드리뷰하는 것이 간단해진다.
 - 각자의 작업공간이 분리되어 있어서 코드 리뷰 후 수정도 쉽다.
 - Gihub PR페이지를 통해 댓글로 리뷰를 주고 받을 수 도 있다.

				[Github Code Review]

	→→→→→→→→→→→→→→→→→→→→→→  🔴 (main branch << Merge)
						↗
					     ↗
	→→ 🔴 →→→→→→ 🔴 →→→→→→
          (cmit01)   ↑   (cmit02)	↓

		   [PR01]	      [PR02]
                1. 기능 추가	   1. 최종본
				   2. Merge
 - PR후 다시 추가하고 그리고 최종적으로 PR관리자에게 승인받은 뒤에 코드리뷰 권한을 가진 관리자만
  코드를 리뷰할 권한이 있다.

✔ gitignore

 - 공유하거나 공개되면 안되는 파일들은 공개된 repo 즉, 공개 Github repo에 올리면 큰일납니다. Git이 마치 이런 파일들을
  없는 것처럼 무시하게 하는 설정이 바로 .gitignore 입니다.
 - 파일명을 .gitignore로 만들고 여기에 Git이 무시해야할 파일 또는 폴더이름을 적어주면 된다. 그리고 나서 내 프로젝트의
  최상위 폴더에 저장하면 끝난다!
 - .gitignore 파일로 내가 중요한 파일을 .gitignore에 넣으면 git에서는 .gitignore파일은 말그대로 무시라는 것이기 때문
  에 중요한 파일은 git에 나타나지 않는다! 그래서 이것을 잘 활용하면 프로젝트때 문제 없이 개발할 수 있다!

✔ README

 - README는 프로젝트나 software사용할때 먼저 읽어야하는 정보를 적어두는 파일이다.
 - Github 프로젝트에서도 README.md를 만들어 프로젝트 소개글을 적어둔다. 프로젝트의 어마어마하게 많은 파일들을 하나씩
  다 읽어 볼 수 없으니 정말 중요한 것만 소개하면 최고!
 - md : mark down이라는 형식의 파일로 작성한다는 뜻이다!
 - markdown : 서식이 적용된 텍스트 파일이다. 보통 텍스트 편집기로도 사용할 수 있지만, markdown문법을 제공하는 편집기
  를 사용하면 서식이 어떻게 적용되는지 한눈에 볼 수 있다. 
 				
				[Mark down 사용법]

	# : 제일 크게 - heading 1
	## : 그 다음 크게 - heading 2
	### : 그 다음 크게 - heading 3

	* 글머리기호(bullet point)
	  * 앞에 두 칸 띄우고 적으면 한 탭에 들어간 글머리 기호!

	1. 순서를 줄 수도 있다!
	2. 두번째
	3. 세번째!

	** 굵은 글씨(문자열 앞 뒤로 빈 칸이 없어야한다.)**

	*이탤릭채(문자열 앞 뒤로 빈 칸이 없어야한다!)*

	```
	 Python
	 # 코드 조각
	 print("Hello, World")
	```

	[네이버 사이트로 연결] (https://www.naver.com/)

	![이미지설명 - 옆에는 이미지url 들어갑니다] (https://lh3.googleusercontent.com/lYhhH_bEYC)

✔ 오픈소스

 - Python, Go, Javascript, Spring, React, Django, Spark, Hadoop등 널리 쓰이는 많은 프로그래밍 언어와 기술들이 모두 
  오픈소스이다.
 - Git은 Linux를 개발할때 협업하는 툴로 태어났다. Git도 오픈소스중 하나이다!
 - Open source란 누구나 프로젝트를 사용하고, 수정하고, 배포할 수 있는 프로젝트를 의미한다.
 - open source를 사용하면 좋은점은 프로젝트가 가진 생태계를 넓힐 수 있다.
 - 프로젝트에 관심있는 사람들이 참여한다면, 적은 규모로 개발했을 때보다 빠르게 프로젝트를 개선시킬 수 있다.
 - 버그를 빠르게 고치고 개선할 수 있고 또는 다른 시각으로 버그를 찾으니깐 다양한 방식으로 여러 버그를 찾고 고칠 수 
  있다는 장점이 있다.
 - 그리고 조직의 개발력을 널리 홍보할 수 있다. 프로젝트 ㅋ코드가 공개가 되니깐 조직의 기술력을 잘 보여 줄 수 있다!
 - 많은 사람들이 프로젝트에 contribution(기여)하면서 발전시켜나가는 것이 바로 Open source의 매력이다!
 - Open source는 단 공짜가 아니다! 라이선스가 따로 있습니다! 꼭 재배포를 할 때에는 원본 라이선스와 똑같은 라이센스를
  사용해야하던가, 비영리적 용도로만 사용해야한다!
 - 소프트웨어에서 많이 ㅆ의는 라이선스로는 Apache License, GNU, MIT 등이 있다.
 - 실제로 Open source를 사용하기 전에 이 라이선스를 제대로 이해하고 사용하는 것이 중요하다!

✔ 오픈소스 contribution(기여)

 - 프로젝트의 bug report(신고) - 동작하지 않는 것을 issue에 적기
 - bug report하는 issue에 해결 답변 달기 - 종종 프로젝트 사용할 때 잘 안되는 것들을 도움받기 위해 issue에 적는 경우
  있다. 만약 내가 해결했던 내용이라면 댓글을 달아주면 좋다. 질문자 뿐만 아니라 그 글을 보는 다른 사람들도 도움이 될
  수 있다.
 - 기술 문서화 - 오타 수정, 서식 수정, 기술을 설명하는 문서 작서엥 참여
 - 번역하기 - 주로 영어를 한글로 변역하는 프로젝트가 많다. translation 할 사람을 구할 때, 한국어 번역 제가 할게요!
  하고 지원하면 된다.
 - 버그 코드 수정
 - 새로운 기능 추가
 - 프로젝트에서 필요로 하는 자료 모으기
 - 프로젝트 행사 운영 기획에 참여하기
 - 그리고 프로젝트가 필요로하는 모든 것들!!

 - 어떤 컨트리뷰션이 필요한지는 주로 issue에서 확인한다. help wanted, good first issue(good first issue)라고 알려준다
 - 각 기술마다 오늘은 전 세계적으로 우리 프로젝트에 기여하는 날! 하고 행사를 열기도 한다. 이렇게 집중적으로 기여하는
  것을 sprint라고 한다.
 - 프로젝트에 상관없이 여러 프로젝트에 오픈소스 컨트리뷰션을 같이 하는 행사를 가지기도 한다. 전 세계적으로 가을에 하는
  헥토버페스트(Hacktoberfest)가 유명하고, 한국에서는 'sprint seoul', 'pycon korean sprint', 'open source contributone'
  등이 정기적으로 열리고 있다.

